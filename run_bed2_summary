#!/bin/bash

#help file
help_info(){
echo -e "\033[40;33;1m"
cat << EOF
Author: Tianxiong (Bear) Yu
usage:
run_bed2_summary -c control.prefix -o out.prefix -g genome -n [miRNA|uniq] [-t treat.prefix] [-p CPU] [-G [0|1|yes|no]]

Parameters:
    -t,-c path_to_piPipes_result/sample_name, eg: /results/piPipes/condition
    -p CPU number to be used. default: 1
    -o output directory name, eg: results/piPipes/bed2_summary/
    -g genome used. default: dm3
    -n normalization method.
        miRNA: normalized to reads per million mapped miRNA reads
        uniq: normalized to reads per million mapped reads exclude miRNA and rRNA reads
    -G set to analysis genes. default: not set
        analysis for genes may take more than 1 hour and the figure pdf for genes is very large.
    -h help information

If anybugs, please contact yutianxiong@gmail.com
EOF
echo -e "\033[0m"
}
if [ $# -lt 1 ];then
	help_info && exit 1
fi

#parameters
IN2=0
PATH_PROG=`dirname $0`
CPU=1
GENE=0
while getopts "ht:c:p:o:g:n:G" OPTION; do
	case $OPTION in
		h)	help_info && exit 1 ;;
		t)	IN2=${OPTARG} ;;
		c)	IN1=${OPTARG} ;;
		p)	CPU=${OPTARG} ;;
		o)	OUTDIR=${OPTARG} ;;
		n)	METHOD=${OPTARG} ;;
		g)	GENOME=${OPTARG} ;;
		G)	GENE=1 ;;
		*)	help_info && exit 1 ;;
	esac
done

for size in 20-23 24-32 0-100 #seperate siRNA piRNA and smRNA
do
	echo0 4 "\n------ analyze ""nt smallRNAs ------\n"
	###run for the first sample
	IN_DIR=`dirname ${IN1}`
	IN_SAMPLE=`basename ${IN1}`
	OUTDIR=${OUTDIR%\/}
	PREFIX1=${OUTDIR}/${IN_SAMPLE}.${size}nt
	PIRNA=`readlink -f ${IN_DIR}/transposon_piRNAcluster_mapping_normalized_by*/${IN_SAMPLE}.x_rRNA.piRNAcluster.a1.insert.bed2`
	awk -v sz=$size 'BEGIN{FS=OFS="\t";split(sz,szsp,"-");l=szsp[1];r=szsp[2]} {if(($3-$2)>=l && ($3-$2)<=r){print $0}}' ${PIRNA} > ${PREFIX1}.temp.piRNA.bed2 && PIRNA=${PREFIX1}.temp.piRNA.bed2 
	TRANSPOSON=`readlink -f ${IN_DIR}/transposon_piRNAcluster_mapping_normalized_by*/${IN_SAMPLE}.x_rRNA.transposon.a1.insert.bed2`
	awk -v sz=$size 'BEGIN{FS=OFS="\t";split(sz,szsp,"-");l=szsp[1];r=szsp[2]} {if(($3-$2)>=l && ($3-$2)<=r){print $0}}' ${TRANSPOSON} > ${PREFIX1}.temp.transposon.bed2 && TRANSPOSON=${PREFIX1}.temp.transposon.bed2
	if [ "$n" == "miRNA" ];then
		HAIRPIN=`readlink -f ${IN_DIR}/hairpins_mapping/${IN_SAMPLE}.x_rRNA.hairpin.v1m1.bed2`
	else
		HAIRPIN=`readlink -f ${IN_DIR}/genome_mapping/${IN_SAMPLE}.x_rRNA.x_hairpin.dm3v1.unique.bed2`
	fi
	#calculate normlization factor
	echo0 2 "calculate normalization factor for control sample......"
	FACTOR=(`awk '{sum+=$4/$5} END{print sum/1000000}' ${HAIRPIN}`)
	echo0 3 "normalization factor: "$FACTOR
	#get summary for picluster reads
	echo0 2 "begin summarize picluster......"
	echo0 2 "    run get_bed2_summary......"
	get_bed2_summary ${PIRNA} ${PATH_PROG}/annotation/dm3/piRNAcluster.sizes ${PREFIX1} ${FACTOR} ${CPU} picluster
	echo0 2 "    calculate signal for each position......"
	bed2_bucket ${PIRNA} ${PATH_PROG}/annotation/dm3/piRNAcluster.sizes ${PREFIX1}.picluster.cov ${FACTOR}
	echo0 2 "    merge summary files......"
	merged_bed2_summary.R ${PREFIX1}.picluster
	#get summary for transposon reads
	echo0 2 "begin summarize transposon for control sample......"
	echo0 2 "    run get_bed2_summary......"
	get_bed2_summary ${TRANSPOSON} ${PATH_PROG}/annotation/dm3/transposon.sizes ${PREFIX1} ${FACTOR} ${CPU} transposon
	echo0 2 "    calculate signal for each position......"
	bed2_bucket ${TRANSPOSON} ${PATH_PROG}/annotation/dm3/transposon.sizes ${PREFIX1}.transposon.cov ${FACTOR}
	echno0 2 "    merge summary files......"
	merged_bed2_summary.R ${PREFIX1}.transposon
	#get summary for gene reads
	if [ "$GENE" == "yes" -o "$GENE" == "1" ];then
		echo0 2 "begin summarize gene for control sample......"
		GF=`readlink -f ${IN_DIR}/genome_mapping/${IN_SAMPLE}.x_rRNA.x_hairpin.dm3v1.all.bed2`
		awk -v sz=$size 'BEGIN{FS=OFS="\t";split(sz,szsp,"-");l=szsp[1];r=szsp[2]} {if(($3-$2)>=l && ($3-$2)<=r){print $0}}' ${GF} > ${PREFIX1}.temp.gene.bed2 && GF=${PREFIX1}.temp.gene.bed2 
		echo0 2 "    intersect with gene.bed12......"
		bedtools intersect -split -nonamecheck -a ${GF} -b ${PATH_PROG}/annotation/dm3/gene.bed12 -wo -f 1 | awk 'BEGIN{FS=OFS="\t"} {gn=$11;if($6==$13){strand="+";s=$2-$9;e=$3-$9}else{strand="-";s=$10-$3;e=$10-$2};print gn,s,e,$4,$5,strand,$7}' > ${PREFIX1}_temp_gene.bed2 
		echo0 2 "    calculate signal for each position......"
		bed2_bucket ${PREFIX1}_temp_gene.bed2 ${PATH_PROG}/annotation/dm3/gene.sizes ${PREFIX1}.gene.cov ${FACTOR}
		awk 'BEGIN{FS=OFS="\t"} {if(NR==FNR){a[$2]=$1}else{$1=a[$1];print $0}}' ${PATH_PROG}/annotation/dm3/gene.map ${PREFIX1}_temp_gene.bed2 > ${PREFIX1}_temp_gene.transform.bed2
		echo0 2 "    run get_bed2_summary......"
		get_bed2_summary ${PREFIX1}_temp_gene.transform.bed2 ${PATH_PROG}/annotation/dm3/gene.map ${PREFIX1} ${FACTOR} ${CPU} gene
		echo0 2 "    transform gene id to gene name......"
		transform_id_to_name.R ${PREFIX1}.gene ${PATH_PROG}/annotation/dm3/gene.map
		echo0 2 "    merge summary files......"
		merged_bed2_summary.R ${PREFIX1}.gene
	fi
	
	###run for the second sample if -c is set
	if [ "${IN2}" != "0" ];then
		IN_DIR=`dirname ${IN2}`
		IN_SAMPLE=`basename ${IN2}`
		OUTDIR=${OUTDIR%\/}
		PREFIX2=${OUTDIR}/${IN_SAMPLE}.${size}nt
		PIRNA=`readlink -f ${IN_DIR}/transposon_piRNAcluster_mapping_normalized_by*/${IN_SAMPLE}.x_rRNA.piRNAcluster.a1.insert.bed2`
		awk -v sz=$size 'BEGIN{FS=OFS="\t";split(sz,szsp,"-");l=szsp[1];r=szsp[2]} {if(($3-$2)>=l && ($3-$2)<=r){print $0}}' ${PIRNA} > ${PREFIX2}.temp.piRNA.bed2 && PIRNA=${PREFIX2}.temp.piRNA.bed2 
		TRANSPOSON=`readlink -f ${IN_DIR}/transposon_piRNAcluster_mapping_normalized_by*/${IN_SAMPLE}.x_rRNA.transposon.a1.insert.bed2`
		awk -v sz=$size 'BEGIN{FS=OFS="\t";split(sz,szsp,"-");l=szsp[1];r=szsp[2]} {if(($3-$2)>=l && ($3-$2)<=r){print $0}}' ${TRANSPOSON} > ${PREFIX2}.temp.transposon.bed2 && TRANSPOSON=${PREFIX2}.temp.transposon.bed2
		if [ "$n" == "miRNA" ];then
			HAIRPIN=`readlink -f ${IN_DIR}/hairpins_mapping/${IN_SAMPLE}.x_rRNA.hairpin.v1m1.bed2`
		else
			HAIRPIN=`readlink -f ${IN_DIR}/genome_mapping/${IN_SAMPLE}.x_rRNA.x_hairpin.dm3v1.unique.bed2`
		fi
		#calculate normlization factor
		echo0 2 "calculate normalization factor for treatment file......"
		FACTOR=(`awk '{sum+=$4/$5} END{print sum/1000000}' ${HAIRPIN}`)
		echo0 3 "    normalization factor: "$FACTOR
		#get summary for picluster reads
		echo0 2 "begin summarize picluster for treatment sample......"
		echo0 2 "    run get_bed2_summary......"
		get_bed2_summary ${PIRNA} ${PATH_PROG}/annotation/dm3/piRNAcluster.sizes ${PREFIX2} ${FACTOR} ${CPU} picluster
		echo0 2 "  calculate signal for each position......"
		bed2_bucket ${PIRNA} ${PATH_PROG}/annotation/dm3/piRNAcluster.sizes ${PREFIX2}.picluster.cov ${FACTOR}
		echo0 2 "    merge summary files......"
		merged_bed2_summary.R ${PREFIX2}.picluster
		#get summary for transposon reads
		echo0 2 "begin summarize transposon for treatment sample......"
		echo0 2 "    run get_bed2_summary......"
		get_bed2_summary ${TRANSPOSON} ${PATH_PROG}/annotation/dm3/transposon.sizes ${PREFIX2} ${FACTOR} ${CPU} transposon
		echo0 2 "    calculate signal for each position......"
		bed2_bucket ${TRANSPOSON} ${PATH_PROG}/annotation/dm3/transposon.sizes ${PREFIX2}.transposon.cov ${FACTOR}
		echo0 2 "    merge summary files......"
		merged_bed2_summary.R ${PREFIX2}.transposon
		#get summary for gene reads
		if [ "$GENE" == "yes" -o "$GENE" == "1" ];then
			echo0 2 "begin summarize gene for treatment sample......"
			GF=`readlink -f ${IN_DIR}/genome_mapping/${IN_SAMPLE}.x_rRNA.x_hairpin.dm3v1.all.bed2`
			awk -v sz=$size 'BEGIN{FS=OFS="\t";split(sz,szsp,"-");l=szsp[1];r=szsp[2]} {if(($3-$2)>=l && ($3-$2)<=r){print $0}}' ${GF} > ${PREFIX2}.temp.gene.bed2 && GF=${PREFIX2}.temp.gene.bed2 
			bedtools intersect -split -nonamecheck -a ${GF} -b ${PATH_PROG}/annotation/dm3/gene.bed12 -wo -f 1 | awk 'BEGIN{FS=OFS="\t"} {gn=$11;if($6==$13){strand="+";s=$2-$9;e=$3-$9}else{strand="-";s=$10-$3;e=$10-$2};print gn,s,e,$4,$5,strand,$7}' > ${PREFIX2}_temp_gene.bed2 
			echo0 2 "    calculate signal for each position......"
			bed2_bucket ${PREFIX2}_temp_gene.bed2 ${PATH_PROG}/annotation/dm3/gene.sizes ${PREFIX2}.gene.cov ${FACTOR}
			awk 'BEGIN{FS=OFS="\t"} {if(NR==FNR){a[$2]=$1}else{$1=a[$1];print $0}}' ${PATH_PROG}/annotation/dm3/gene.map ${PREFIX2}_temp_gene.bed2 > ${PREFIX2}_temp_gene.transform.bed2
			echo0 2 "    run get_bed2_summary......"
			get_bed2_summary ${PREFIX2}_temp_gene.transform.bed2 ${PATH_PROG}/annotation/dm3/gene.map ${PREFIX2} ${FACTOR} ${CPU} gene
			echo0 2 "    transform gene id to gene name......"
			transform_id_to_name.R ${PREFIX2}.gene ${PATH_PROG}/annotation/dm3/gene.map
			echo0 2 "    merge summary files......"
			merged_bed2_summary.R ${PREFIX2}.gene
		fi
	fi
	###bucket plot
	if [ "$IN2" == "0" ];then
		echo0 2 "make bucket plot for picluster......"
		plot_bed2_summary.R ${CPU} ${PREFIX1}.picluster
		echo0 2 "make bucket plot for transposon......"
		plot_bed2_summary.R ${CPU} ${PREFIX1}.transposon
		if [ "$GENE" == "yes" -o "$GENE" == "1" ];then
			echo0 2 "make bucket plot for gene......"
			plot_bed2_summary.R ${CPU} ${PREFIX1}.gene
		fi
	else
		echo0 2 "make bucket plot for picluster......"
		plot_bed2_summary.R ${CPU} ${PREFIX1}.picluster ${PREFIX2}.picluster
		echo0 2 "make bucket plot for transposon......"
		plot_bed2_summary.R ${CPU} ${PREFIX1}.transposon ${PREFIX2}.transposon
		if [ "$GENE" == "yes" -o "$GENE" == "1" ];then
			echo0 2 "make bucket plot for gene......"
			plot_bed2_summary.R ${CPU} ${PREFIX1}.gene ${PREFIX2}.gene
		fi
	fi
	###remove temp files
	rm ${PREFIX1}.temp* ${PREFIX2}.temp*
done
echo0 2 "Finished!!!"
